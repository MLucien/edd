> edd:dd("miller_rabin:first_10()").
2
3
5
7
9
Total number of tree nodes: 152
Tree size:
        21840 words
        174720 bytes

Please, insert a list of trusted functions [m1:f1/a1, m2:f2/a2 ...]:
miller_rabin:is_mr_prime(9, [2, 3]) = true? [y/n/t/d/i/s/u/a]: n
miller_rabin:mr_series(9, 2, 1, 3) = [1, 1, 1, 1]? [y/n/t/d/i/s/u/a]: d
miller_rabin:mr_series(9, 3, 1, 3) = [1, 1, 1, 1]? [y/n/t/d/i/s/u/a]:
miller_rabin:mr_series(9, 3, 1, 3) = [1, 1, 1, 1]? [y/n/t/d/i/s/u/a]: d
miller_rabin:find_ds(9) = {1, 3}? [y/n/t/d/i/s/u/a]: t
miller_rabin:pow_mod(2, 8.0, 9) = 1? [y/n/t/d/i/s/u/a]: n
miller_rabin:pow_mod(2, 1, 9) = 1? [y/n/t/d/i/s/u/a]: n
miller_rabin:pow_mod(2, 0, 9) = 1? [y/n/t/d/i/s/u/a]: y
Call to a function that contains an error:
miller_rabin:pow_mod(2, 1, 9) = 1
Please, revise the second clause:
pow_mod(B, E, M) ->
    case trunc(E) rem 2 == 0 of
      true ->
          trunc(math:pow(pow_mod(B, trunc(E / 2), M), 2)) rem M;
      false -> trunc(pow_mod(B, E - 1, M)) rem M
    end.







DIVIDE AND QUERY: 6
====================
4> edd:dd("miller_rabin:first_10()", tree).
Please, insert a list of trusted functions [m1:f1/a1, m2:f2/a2 ...]:
miller_rabin:is_prime(9) = true? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

fun (A) ->
        case mr_series(9, A, 1, 3) of
          [1 | _] -> false;
          L -> not lists:member(9 - 1, L)
        end
end(2) =
    false
fun location: (miller_rabin.erl, line 34)? [y/n/t/d/i/s/u/a]: n

Complexity: 2 (data structures) + 2 (clauses) + 1 (lambdas) + 1 (base) = 6

fun (J) -> pow_mod(2, math:pow(2, J) * 1, 9) end(3) = 1
fun location: (miller_rabin.erl, line 30)? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (lambda) + 1 (base) = 2

miller_rabin:pow_mod(2, 2, 9) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

miller_rabin:pow_mod(2, 0, 9) = 1? [y/n/t/d/i/s/u/a]: y

Complexity: 1 (base)

miller_rabin:pow_mod(2, 1, 9) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)
Total complexity: 12
Max complexity: 6

Call to a function that contains an error:
miller_rabin:pow_mod(2, 1, 9) = 1
Please, revise the second clause:
pow_mod(B, E, M) ->
    case trunc(E) rem 2 == 0 of
      true ->
          trunc(math:pow(pow_mod(B, trunc(E / 2), M), 2)) rem M;
      false -> trunc(pow_mod(B, E - 1, M)) rem M
    end.
ok


TOP-DOWN: 10
=============
5> edd:dd( "miller_rabin:first_10()", tree, top_down).
Please, insert a list of trusted functions [m1:f1/a1, m2:f2/a2 ...]:
miller_rabin:is_prime(9) = true? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

miller_rabin:is_mr_prime(9, [2, 3]) = true? [y/n/t/d/i/s/u/a]: n
fun (A) ->
        case mr_series(9, A, 1, 3) of
          [1 | _] -> false;
          L -> not lists:member(9 - 1, L)
        end
end(3) =
    false
fun location: (miller_rabin.erl, line 34)? [y/n/t/d/i/s/u/a]: n

Complexity: 2 (data structures) + 2 (clauses) + 1 (lambdas) + 1 (base) = 6

miller_rabin:mr_series(9, 3, 1, 3) = [1, 1, 1, 1]? [y/n/t/d/i/s/u/a]: n

Complexity: 5 (data structures) + 1 (base) = 6

fun (J) -> pow_mod(3, math:pow(2, J) * 1, 9) end(3) = 1
fun location: (miller_rabin.erl, line 30)? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (lambda) + 1 (base) = 2

miller_rabin:pow_mod(3, 8.0, 9) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

miller_rabin:pow_mod(3, 4, 9) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

miller_rabin:pow_mod(3, 2, 9) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

miller_rabin:pow_mod(3, 1, 9) = 1? [y/n/t/d/i/s/u/a]: n

Complexity: 1 (base)

miller_rabin:pow_mod(3, 0, 9) = 1? [y/n/t/d/i/s/u/a]: y

Complexity: 1 (base)
Total complexity: 24
Max complexity: 6

Call to a function that contains an error:
miller_rabin:pow_mod(3, 1, 9) = 1
Please, revise the second clause:
pow_mod(B, E, M) ->
    case trunc(E) rem 2 == 0 of
      true ->
          trunc(math:pow(pow_mod(B, trunc(E / 2), M), 2)) rem M;
      false -> trunc(pow_mod(B, E - 1, M)) rem M
    end.
ok

